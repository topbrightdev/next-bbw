{
  "ast": null,
  "code": "import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { withTheme } from 'styled-components';\nimport Select from 'react-select';\nvar defaultOptions = [{\n  value: [''],\n  label: 'Industries'\n}, {\n  value: ['Specialty Contractors'],\n  label: 'Contractors'\n}, {\n  value: ['Finance & Insurance Sector'],\n  label: 'Finance'\n}, {\n  value: ['Health Care Sector'],\n  label: 'Health Care'\n}, {\n  value: ['Professional Services Sector', 'Business Services Sector'],\n  label: 'Professional Services'\n}, {\n  value: ['Real Estate'],\n  label: 'Real Estate'\n}, {\n  value: ['Restaurants, Bars & Food Services'],\n  label: 'Restaurants'\n}, {\n  value: ['Retail Sector'],\n  label: 'Retail'\n}, {\n  value: ['Transportation Services Sector'],\n  label: 'Transportation'\n}];\n\nvar getCustomStyles = function getCustomStyles(theme, accentColor, bg, border, indicator) {\n  return {\n    dropdownIndicator: function dropdownIndicator() {\n      return {\n        display: !indicator && 'none'\n      };\n    },\n    indicatorSeparator: function indicatorSeparator() {},\n    option: function option(provided, state) {\n      return _objectSpread(_objectSpread({}, provided), {}, {\n        color: state.isSelected ? theme.colors[accentColor] : theme.colors.dark,\n        textAlign: 'left',\n        backgroundColor: bg\n      });\n    },\n    control: function control(provided, state) {\n      return _objectSpread(_objectSpread({}, provided), {}, {\n        border: !border ? 'none' : state.menuIsOpen || state.isFocused ? \"1px solid \".concat(theme.colors[accentColor], \" !important\") : \"1px solid \".concat(theme.colors.border, \" !important\"),\n        borderRadius: 10,\n        padding: '0.25rem 1rem',\n        width: '100%',\n        height: '45px',\n        outline: 'none',\n        boxShadow: 'none',\n        textAlign: 'left',\n        backgroundColor: bg\n      });\n    }\n  };\n};\n\nvar sendFilters = function sendFilters(selected) {\n  return selected;\n};\n\nvar SelectStyled = function SelectStyled(_ref) {\n  var theme = _ref.theme,\n      _ref$bg = _ref.bg,\n      bg = _ref$bg === void 0 ? '#fff' : _ref$bg,\n      _ref$border = _ref.border,\n      border = _ref$border === void 0 ? true : _ref$border,\n      _ref$accentColor = _ref.accentColor,\n      accentColor = _ref$accentColor === void 0 ? 'success' : _ref$accentColor,\n      _ref$name = _ref.name,\n      name = _ref$name === void 0 ? 'item' : _ref$name,\n      _ref$indicator = _ref.indicator,\n      indicator = _ref$indicator === void 0 ? true : _ref$indicator,\n      sendFilters = _ref.sendFilters,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? defaultOptions : _ref$options,\n      rest = _objectWithoutProperties(_ref, [\"theme\", \"bg\", \"border\", \"accentColor\", \"name\", \"indicator\", \"sendFilters\", \"options\"]);\n\n  return __jsx(Select, _extends({\n    styles: getCustomStyles(theme, accentColor, bg, border, indicator),\n    defaultValue: options[0],\n    name: name,\n    options: options,\n    instanceId: \"inId\",\n    onChange: sendFilters\n  }, rest));\n};\n\nexport default withTheme(SelectStyled);",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
