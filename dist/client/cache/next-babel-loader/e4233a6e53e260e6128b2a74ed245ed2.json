{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { withTheme } from 'styled-components';\nimport Select from 'react-select';\nconst defaultOptions = [{\n  value: [''],\n  label: 'Industries'\n}, {\n  value: ['Specialty Contractors'],\n  label: 'Contractors'\n}, {\n  value: ['Finance & Insurance Sector'],\n  label: 'Finance'\n}, {\n  value: ['Health Care Sector'],\n  label: 'Health Care'\n}, {\n  value: ['Professional Services Sector', 'Business Services Sector'],\n  label: 'Professional Services'\n}, {\n  value: ['Real Estate'],\n  label: 'Real Estate'\n}, {\n  value: ['Restaurants, Bars & Food Services'],\n  label: 'Restaurants'\n}, {\n  value: ['Retail Sector'],\n  label: 'Retail'\n}, {\n  value: ['Transportation Services Sector'],\n  label: 'Transportation'\n}];\n\nconst getCustomStyles = (theme, accentColor, bg, border, indicator) => {\n  return {\n    dropdownIndicator: () => {\n      return {\n        display: !indicator && 'none'\n      };\n    },\n    indicatorSeparator: () => {},\n    option: (provided, state) => {\n      return _objectSpread(_objectSpread({}, provided), {}, {\n        color: state.isSelected ? theme.colors[accentColor] : theme.colors.dark,\n        textAlign: 'left',\n        backgroundColor: bg\n      });\n    },\n    control: (provided, state) => {\n      return _objectSpread(_objectSpread({}, provided), {}, {\n        border: !border ? 'none' : state.menuIsOpen || state.isFocused ? `1px solid ${theme.colors[accentColor]} !important` : `1px solid ${theme.colors.border} !important`,\n        borderRadius: 10,\n        padding: '0.25rem 1rem',\n        width: '100%',\n        height: '45px',\n        outline: 'none',\n        boxShadow: 'none',\n        textAlign: 'left',\n        backgroundColor: bg\n      });\n    }\n  };\n};\n\nconst sendFilters = selected => {\n  return selected;\n};\n\nconst SelectStyled = (_ref) => {\n  let {\n    theme,\n    bg = '#fff',\n    border = true,\n    accentColor = 'success',\n    name = 'item',\n    indicator = true,\n    sendFilters,\n    options = defaultOptions\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"theme\", \"bg\", \"border\", \"accentColor\", \"name\", \"indicator\", \"sendFilters\", \"options\"]);\n\n  return __jsx(Select, _extends({\n    styles: getCustomStyles(theme, accentColor, bg, border, indicator),\n    defaultValue: options[0],\n    name: name,\n    options: options,\n    instanceId: \"inId\",\n    onChange: sendFilters\n  }, rest));\n};\n\nexport default withTheme(SelectStyled);",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
