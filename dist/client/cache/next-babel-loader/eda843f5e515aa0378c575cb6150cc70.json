{
  "ast": null,
  "code": "var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { color, space, typography, shadow } from \"styled-system\";\nconst Paragraph = styled.p.withConfig({\n  displayName: \"Text__Paragraph\",\n  componentId: \"sc-1o29x0x-0\"\n})([\"font-size:1.0625rem;letter-spacing:-0.2px;line-height:1.71;\", \";\", \";\", \";\", \";\"], color, space, typography, shadow);\nconst ParagraphLarge = styled.p.withConfig({\n  displayName: \"Text__ParagraphLarge\",\n  componentId: \"sc-1o29x0x-1\"\n})([\"font-size:1.1875rem;letter-spacing:-0.2px;line-height:1.69;\", \";\", \";\", \";\", \";\"], color, space, typography, shadow);\nconst ParagraphSmall = styled.p.withConfig({\n  displayName: \"Text__ParagraphSmall\",\n  componentId: \"sc-1o29x0x-2\"\n})([\"font-size:0.9375rem;letter-spacing:-0.1px;line-height:1.73;\", \";\", \";\", \";\", \";\"], color, space, typography, shadow);\n\nconst Text = (_ref) => {\n  let {\n    variant\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"variant\"]);\n\n  let TextRender;\n\n  switch (variant) {\n    case \"sm\":\n      TextRender = ParagraphSmall;\n      break;\n\n    case \"lg\":\n      TextRender = ParagraphLarge;\n      break;\n\n    default:\n      TextRender = Paragraph;\n  }\n\n  return __jsx(TextRender, _extends({\n    color: \"text\"\n  }, props));\n};\n\nexport default Text;",
  "map": null,
  "metadata": {},
  "sourceType": "module"
}
